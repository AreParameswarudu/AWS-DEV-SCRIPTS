[1mdiff --git a/Linux/Scripting/Exercise.md b/Linux/Scripting/Exercise.md[m
[1mindex a9180ab..ebb6ae1 100644[m
[1m--- a/Linux/Scripting/Exercise.md[m
[1m+++ b/Linux/Scripting/Exercise.md[m
[36m@@ -86,7 +86,6 @@[m [mecho "[$TimeStamp] cleaning completed." >> "$Log_file"[m
 [m
 [m
 ## Q5[m
[31m-[m
 Create a script that takes a list of IPs form a file and checks which ones are reachable ( ping ).[m
 [m
 Create a text file and add IP addresses to it and name it as `file.txt`. add IP addresses like ( 8.8.8.8, 192.168.1.0, 8.8.8.4, 10.0.0.1)[m
[36m@@ -219,7 +218,7 @@[m [mHow do you handle errors in a shell script? Give example.[m
 Different ways of handling the errors,  [m
 To ways to appraoch this, [m
 ### 1. To add the errors to the log files[m
[31m-In bash and most shells,   [m
[32m+[m[32mIn bash and most shells,  ( `1` and `2` represents the file descriptions)[m
 --> `1` --> Standard output (stdout)   [m
 --> `2` --> Standard Error (stderr)  [m
 [m
[36m@@ -238,7 +237,7 @@[m [mwe mean to say, send stdout to `output.log` and also, send stderr to where stdou[m
 EX: script.sh[m
 ```[m
 #!/bin/bash[m
[31m-myscript.sh >> /ave/log/myscript.log 2>&1[m
[32m+[m[32mmyscript.sh >> /var/log/myscript.log 2>&1[m
 ```[m
 [m
 [m
[36m@@ -265,16 +264,159 @@[m [mfi[m
 [m
 ## Q13[m
 Write a script to monitor disk usage and send an alert if it exceeds a threshold.[m
[32m+[m[32mCreate a file named `script.sh`[m[41m  [m
[32m+[m
[32m+[m[32m```[m
[32m+[m[32m#!/bin/bash[m
[32m+[m
[32m+[m[32mmount_path='/'[m
[32m+[m[32m#Defining the threshold[m
[32m+[m[32mThreshold=75[m[41m  [m
[32m+[m[32musage=$( df -h "$mount_path" | awk 'NR==2 {gsub("%", "", $5); print $5}')[m
[32m+[m
[32m+[m[32mif [ "$usage" -ge "$Threshold" ]; then[m
[32m+[m[32m    echo "Disk usage is at ${usage}% and is more than threshold"[m
[32m+[m[32melse[m
[32m+[m[32m    echo "Disk usage is fine and is below threshold"[m
[32m+[m[32mfi[m
[32m+[m[32m```[m
[32m+[m[32mHere,[m[41m   [m
[32m+[m[32m`awk` is a pattern scanning and processing language. It reads input line by line, splits each line into fields (columns) and lets us to apply logic to extract, transform, or report data.  Its like a mini scripting language built for structured text.[m[41m  [m
[32m+[m
[32m+[m[32mCore concepts of `awk`:[m[41m  [m
[32m+[m[32m1. Input is processed line by line,[m[41m [m
[32m+[m[32mEach line is referred as record, and awk reads one record at a time.[m
[32m+[m
[32m+[m[32m2. Fields are auto-split:[m
[32m+[m[32mBy default, fields are split by whitespaces, we can change the delimeter suing `-F`,[m[41m   [m
[32m+[m[32m`$1` refers the firts column, `$2` refers 2nd column and so on.[m
[32m+[m
[32m+[m[32m3. Built in variables[m
[32m+[m[32m| Variable | Meaning|[m
[32m+[m[32m|---|---|[m
[32m+[m[32m| `NR` | Current line number (record number) |[m
[32m+[m[32m|  `NF` | Number of fields in the current line |[m[41m [m
[32m+[m[32m| `$0` | Entire line |[m
[32m+[m[32m| `$1`, `$2`| individual records |[m
[32m+[m
[32m+[m[32m4. Common functions[m
[32m+[m[32m`print` --> output fileds.[m[41m  [m
[32m+[m[32m`gsub( regex, replacement, target)` --> global substitution (not inplace).[m[41m  [m
[32m+[m[32m`length($0)` --> length of line.[m[41m  [m
[32m+[m[32m`tolower($1)` --> lower case convertion.[m[41m  [m
[32m+[m[32m`substr($3,1, 5)` --> substring of field 3.[m[41m  [m
[32m+[m
 [m
 [m
 ## Q14 [m
[31m-Write a bash script to find and kill the processes that are using a given port.[m
[32m+[m[32mWrite a bash script to find and kill the processes that are using a given port.[m[41m  [m
[32m+[m
[32m+[m
[32m+[m[32mCreate a script named `script.sh`[m[41m  [m
[32m+[m[32m```[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32mfile_path="/var/log/myapp-log"[m
[32m+[m[32mawk "{print $3}" "$file_path"[m
[32m+[m[32m```[m
 [m
 ## Q15[m
[31m-How do you use `trap` in bash scripts and give an example for such usages.[m
[32m+[m[32mHow do you use `trap` in bash scripts and give an example for such usages.[m[41m  [m
[32m+[m
[32m+[m
[32m+[m[32m`trap` command is used to run/execute a custom defined command when the script exits or encounters errors.[m[41m  [m
[32m+[m[32mex: `trap 'echo "Script failed at line $LINENO"; exit 1' ERR[m
 [m
 ## Q16[m
 Write a bash script to perform a backup of a directory to another location.[m
 [m
[31m-## Q17 [m
[32m+[m[32mWell the question is little ambiguous, so lets assume few aspects here, we will make the script dynamic by giving the users the ability to prompt which directory to be migrated, where ( server ip) to, and what is the destination.[m
[32m+[m
[32m+[m[32m```[m
[32m+[m[32m#!/bin/bash[m
[32m+[m
[32m+[m[32mecho "started migrating...."[m
[32m+[m
[32m+[m[32m#inputing for users[m[41m [m
[32m+[m[32mread -p "Enter the source directory path: " source_dir[m
[32m+[m[32mread -p "Enter the backup server IP: " backup_server[m
[32m+[m[32mread -p "Enter the distribution path on server: " dest_path[m
 [m
[32m+[m[32m#check if source directory exists[m
[32m+[m[32mif [ ! -d "$source_dir" ]; then[m
[32m+[m[32m    echo "Source Directory doesnot eixst."[m
[32m+[m[32m    exit 1[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m#check if server is reacheable[m
[32m+[m[32mping -c 1 "$backup_server" > /dev/null 2>&1[m
[32m+[m[32mif [ $? -ne 0 ]; then[m
[32m+[m[32m    echo "Cannot reach backup server at $backup_server"[m
[32m+[m[32m    exit 2[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m#create .tar.gz for the source_dir[m
[32m+[m[32msource_dir_gz="target_dir.tar.gz"[m
[32m+[m[32mtar -czf "$source_dir_gz" "$source_dir"[m
[32m+[m
[32m+[m[32m# perform backup using rsync[m
[32m+[m[32mrsync -avz "$source_dir_gz" "$backup_server:$dest_path"[m
[32m+[m
[32m+[m[32mif  [$? -eq 0]; then[m
[32m+[m[32m    echo "Migration complete"[m
[32m+[m[32melse[m
[32m+[m[32m    echo "Migration failed"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mecho "Script execution was complete."[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## Q17[m
[32m+[m
[32m+[m[32mHow do we securly store and use passwords in shell scripting!![m
[32m+[m
[32m+[m[32mWhen do we use them,[m[41m [m
[32m+[m[32m1. Connecting to remote server: via SSH, SFTP or rsync.[m[41m  [m
[32m+[m[32m2. Accessing databases: Mysql, PostgresSQL, etc.[m[41m  [m
[32m+[m[32m3. Interacting with APIs: that require authentication.[m[41m  [m
[32m+[m[32m4. Mounting network drives or encrypted volumes.[m[41m  [m
[32m+[m[32m5. Running backup scripts that push to cloud or remote storage.[m[41m  [m
[32m+[m
[32m+[m[32mSecure strategies to  store and use passwords:[m
[32m+[m[32m1. Using Env variables[m
[32m+[m[32m```[m
[32m+[m[32mexport DB_PASSWORD="mySecret123"[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mWith that we can just refer the env variable as,[m[41m [m
[32m+[m[32m```[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32mecho "Using password: $DB_PASSWORD"[m
[32m+[m[32m```[m
[32m+[m[32mBut was not more secured.[m
[32m+[m
[32m+[m[32m2. Use of `.netrc` or `.pgpass` files[m[41m  [m
[32m+[m[32mFor tools like `culr`, `ftp`, or `psql`, we can use dedicated files:[m
[32m+[m[32m*   `~/.netrc` for FTP or curl[m[41m  [m
[32m+[m[32m*   `~/.pgpass` for postgreSQL[m[41m  [m
[32m+[m[32mThese files should be owned by user and also to set `chmod 600` for security.[m[41m  [m
[32m+[m
[32m+[m[32m3. Use a password manager or secret vault.[m[41m  [m
[32m+[m[32mFoe enterprise-grade security, use tools like,[m[41m   [m
[32m+[m[32m* HashiCorp Vault[m
[32m+[m[32m* AWS Secret manager[m
[32m+[m[32m* Gnome Keyring / KWallet[m[41m [m
[32m+[m[32mWith them, the scripts can query the vault securely and retrive the password only when needed.[m[41m  [m
[32m+[m
[32m+[m[32m4. Prompt the user at runtime[m[41m  [m
[32m+[m[32m```[m
[32m+[m[32mread -s -p "Enter your passwword: " password[m
[32m+[m[32m```[m
[32m+[m[32mhere, `-s` will hides the input and by this way, the password wiil be kept in memory for the duration of execution.[m[41m   [m
[32m+[m
[32m+[m[32m5. Use of SSH keys intead of passwords[m[41m  [m
[32m+[m[32mFor remote access ( eg. rsync, scp, ssh) use key-based authentication.[m
[32m+[m
[32m+[m[32m```[m
[32m+[m[32mrsync -e 'ssh -i ~/.ssh/idrsa" /data user@server:/backup[m
[32m+[m[32m```[m
[32m+[m[32mNo password needed, and more secure.[m[41m  [m
